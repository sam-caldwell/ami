spec_version: 0.0.1
generated: 2025-09-30T00:00:00Z
authority:
  docx: docs/Asynchronous Machine Interface.docx
notes:
  - AMI language-specific documentation should be kept in docs/language/
  - All work will be performed on the main branch.
  - Any build artifacts, logs or other runtime or test files should be stored in `build/`
  - Changes should be committed to git with each work item performed.
  - Expectations are grouped by `ami` subcommand, then by feature.
  - Where present, `docx` lists relevant sections from the authoritative document.
  - Status mapping: done→complete, todo→ready, partial/checklisted→in progress.
  - Completion means: code complete, ≥0.80 coverage (happy+sad), all tests passing.
  - Codegen order:
      - simplified object format → debug ASM → LLVM objects.
      - binary artifacts should be statically linked
  - Repository conventions:
      - one declaration per file
      - ≥80% coverage per touched package
      - deterministic outputs
      - JSON/human modes
      - errors to stderr
      - JSON lines for streaming
  - directory layout:
      - build directory: `build/`
      - source code: `src/`
      - documentation: `docs/`
      - AMI examples: `examples/`
      - End-to-End tests: `tests/`
  - Event<T>: conceptual generic carrying `value T` and `timestamp time.Time`; used by trigger emissions and similar.
  - io.FHO: |
      file/stream handle abstraction; methods return `(n int, err error)` where applicable; after `.Close()` all 
      operations fail with an error indicating a closed handle.
  - time.Duration: Go-compatible duration; integer nanoseconds with human string forms like `300ms`, `5s`, `2h45m`.
  - io.NetProtocol: enum of network protocols used by socket APIs; values include `TCP`, `UDP`, `ICMP`.

subcommands:
  - id: C-1
    name: root
    features:
      - id: F-1-1
        name: Global Flags & Output Modes
        expectations:
          - id: E-1-1
            statement: As a CLI user, I expect `--help`, `--json`, `--verbose`, and `--color` to be consistently
              available on root and subcommands with enforced incompatibility between `--json` and `--color` and
              correct exit codes.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/root_flags_test.go
              - src/cmd/ami/root_examples_test.go
              - src/cmd/ami/root_more_test.go
              - src/cmd/ami/command_wiring_test.go
              - src/cmd/ami/filter_fields_cli_test.go
              - src/cmd/ami/redact_cli_test.go
              - src/cmd/ami/redact_prefix_cli_test.go
      - id: F-1-2
        name: Structured Logging
        expectations:
          - id: E-1-2
            statement: As an operator, I expect structured logs with human and JSON renderers, redaction controls,
              and verbose logs written to `build/debug` without polluting primary stdout/stderr streams.
            dependencies: []
            status: complete
            tests:
              - src/schemas/log/record_test.go
              - src/cmd/ami/build_compile_logging_test.go
              - src/cmd/ami/build_verbose_kvstore_test.go

  - id: C-2
    name: init
    features:
      - id: F-2-1
        name: Workspace Bootstrapping
        expectations:
          - id: E-2-1
            statement: |
              As a project author, I expect `ami init` to create a default `ami.workspace` with the AMI workspace 
              schema, seed current `os/arch`, and create target and source directories idempotently, with `--force` 
              only adding missing fields.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/init_cmd_test.go
              - src/cmd/ami/cache_dir_test.go
      - id: F-2-2
        name: Git Initialization and Ignoring Build Artifacts
        expectations:
          - id: E-2-2
            statement: |
              As a project author, I expect `ami init` to ensure the repo is initialized with git or to 
              run `git init` when `--force` is provided and create a `.gitignore` that ignores `./build`.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/init_gitignore_test.go

  - id: C-3
    name: clean
    features:
      - id: F-3-1
        name: Build Artifacts Cleanup
        expectations:
          - id: E-3-1
            statement: |
              As a user, I expect `ami clean` to remove and recreate `./build`, emitting human and JSON outputs 
              and correct exit codes on errors.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/clean_cmd_cli_test.go
              - src/cmd/ami/clean_cmd_test.go
              - src/cmd/ami/clean_preserve_sum_test.go

  - id: C-4
    name: mod clean
    features:
      - id: F-4-1
        name: Package Cache Cleanup
        expectations:
          - id: E-4-1
            statement: |
              As a user, I expect `ami mod clean` to remove and recreate the package cache 
              directory `${AMI_PACKAGE_CACHE}` (or default `${HOME}/.ami/pkg`).
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/mod_clean_cmd_test.go
              - src/cmd/ami/mod_clean_run_test.go
              - src/cmd/ami/mod_clean_json_shape_test.go
              - src/cmd/ami/mod_clean_mkdir_fail_test.go

  - id: C-5
    name: mod update
    aliases: [mod sum]
    features:
      - id: F-5-1
        name: Sum Validation and Fetch
        expectations:
          - id: E-5-1
            statement: |
              As a user, I expect `ami mod update` to validate `ami.sum`, verify checksums, resolve version 
              constraints from `ami.workspace`, and download missing packages into the cache, updating `ami.sum` 
              deterministically.
            dependencies: [F-7-1, F-9-1]
            status: complete
            docx: ["2.2.1"]
            tests:
              - src/cmd/ami/mod_sum_cmd_test.go
              - src/cmd/ami/mod_sum_run_test.go
              - src/cmd/ami/mod_sum_json_shape_test.go
              - src/cmd/ami/mod_sum_network_test.go
              - src/cmd/ami/mod_update_cmd_test.go
              - src/cmd/ami/mod_update_run_test.go
              - src/cmd/ami/mod_update_select_test.go
              - src/cmd/ami/mod_update_human_selected_test.go
              - src/cmd/ami/mod_update_json_audit_test.go

      - id: F-5-2
        name: Modules Sum Integrity and Version Checks
        expectations:
          - id: E-5-2
            statement: |
              As a user, I expect `ami mod sum` to validate `ami.sum` format, resolve version constraints consistently
              with `ami.workspace`, and enforce integrity via checksums with clear diagnostics.
            dependencies: [F-7-1]
            status: complete
            docx: ["2.2.1"]
            tests:
              - src/cmd/ami/mod_sum_cmd_test.go
              - src/cmd/ami/mod_sum_run_test.go
              - src/cmd/ami/mod_sum_json_shape_test.go
              - src/cmd/ami/mod_sum_network_test.go

  - id: C-6
    name: mod get
    features:
      - id: F-6-1
        name: Fetch Sources
        expectations:
          - id: E-6-1
            statement: |
              As a user, I expect `ami mod get <url>` to fetch a package via `git+ssh://...#<semver>` or local
              workspace path, place it under `${HOME}/.ami/pkg/<name>/<version>`, and update `ami.sum`.
            dependencies: [F-9-1]
            status: complete
            tests:
              - src/cmd/ami/mod_get_cmd_test.go
              - src/cmd/ami/mod_get_run_test.go
              - src/cmd/ami/mod_get_git_run_test.go
              - src/cmd/ami/mod_get_json_shape_test.go
              - src/cmd/ami/mod_get_network_test.go
              - src/cmd/ami/mod_get_select_semver_test.go
              - src/cmd/ami/mod_get_version_select_test.go

  - id: C-7
    name: mod list
    features:
      - id: F-7-1
        name: List Cached Packages
        expectations:
          - id: E-7-1
            statement: |
              As a user, I expect `ami mod list` to enumerate cached packages with name, version, size, and updated
              timestamp in human and JSON modes.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/mod_list_cmd_test.go
              - src/cmd/ami/mod_list_run_test.go
              - src/cmd/ami/mod_list_human_test.go
              - src/cmd/ami/mod_list_json_shape_test.go
              - src/cmd/ami/mod_list_versions_test.go

  - id: C-8
    name: mod audit
    features:
      - id: F-8-1
        name: Audit Requirements vs Cache
        expectations:
          - id: E-8-1
            statement: |
              As a user, I expect `ami mod audit` to report requirements, missingInSum, unsatisfied constraints,
              missingInCache, mismatched digests, parseErrors, and sumFound with machine-parsable JSON and succinct
              human output.
            dependencies: [F-9-1]
            status: complete
            tests:
              - src/cmd/ami/mod_audit_run_test.go

  - id: C-9
    name: lint
    features:
      - id: F-9-1
        name: Memory Safety Diagnostics
        expectations:
          - id: E-9-1-2.3.2
            statement: |
              As an AMI programmer, I expect the linter to report memory-safety violations including
              `E_PTR_UNSUPPORTED_SYNTAX`, `E_MUT_BLOCK_UNSUPPORTED`, and `E_MUT_ASSIGN_UNMARKED` per AMI 2.3.2.
            dependencies: []
            status: complete
            docx: ["1.9.1", "1.5.4"]
            tests:
              - src/cmd/ami/lint_memsafety_test.go
              - src/cmd/ami/lint_mut_assign_test.go
              - src/cmd/ami/lint_raii_hint_test.go
      - id: F-9-2
        name: Lint Rule Engine and CLI
        expectations:
          - id: E-9-2
            statement: |
              As a user, I expect lint to support naming/import/unused/style rules, strict mode, pragma/config
              suppression, and emit `diag.v1` JSON lines with a final summary.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/lint_cmd_cli_test.go
              - src/cmd/ami/lint_engine_test.go
              - src/cmd/ami/lint_rules_test.go
              - src/cmd/ami/lint_rules_flags_test.go
              - src/cmd/ami/lint_rule_elevation_test.go
              - src/cmd/ami/lint_rule_elevation_human_test.go
              - src/cmd/ami/lint_exit_codes_test.go
      - id: F-9-3
        name: Name Resolution and Types
        expectations:
          - id: E-9-3-2.1
            statement: |
              As a user, I expect deterministic cross-file/package name resolution with stable diagnostics for
              unknown/duplicate symbols per §2.1.*.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/lint_import_recursive_test.go
              - src/cmd/ami/lint_import_cycle_test.go
              - src/cmd/ami/lint_import_cycle_multi_test.go
              - src/cmd/ami/lint_dup_func_test.go
              - src/cmd/ami/lint_import_undeclared_test.go
              - src/cmd/ami/lint_crosspkg_constraints_test.go
              - src/cmd/ami/lint_crosspkg_constraints_conflict_test.go
              - src/cmd/ami/lint_crosspkg_range_test.go
              - src/cmd/ami/lint_crosspkg_single_version_test.go
              - src/cmd/ami/lint_crosspkg_prerelease_test.go
              - src/cmd/ami/lint_pkg_version_test.go

      - id: F-9-4
        name: Merge Attribute Validation
        expectations:
          - id: E-9-4-1.2.4
            statement: |
              As a user, I expect lint to validate merge.* attributes (Buffer/Window/Watermark/Timeout/PartitionBy/
              Dedup/Key/Stable) for arity/type/conflict with deterministic normalization.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/lint_buffer_smells_test.go

      - id: F-9-5
        name: Mutation Enforcement Rules
        expectations:
          - id: E-9-5-2.3.2
            statement: |
              As an AMI programmer, I expect lint to enforce explicit mutation markers and reject unmarked mutations 
              with `E_MUT_ASSIGN_UNMARKED` and related diagnostics.
            dependencies: []
            status: complete

  - id: C-10
    name: test
    features:
      - id: F-10-1
        name: JSON Event Streaming
        expectations:
          - id: E-10-1
            statement: |
              As a user, I expect `ami test` to stream JSON lines for events and a final summary with stable schema,
              honoring CLI flags.
            dependencies: [F-11-1]
            status: complete
            docx: ["1.6"]
            tests:
              - src/cmd/ami/test_json_stream_test.go
              - src/cmd/ami/test_run_test.go
              - src/cmd/ami/test_run_more_test.go
              - src/cmd/ami/test_runtime_cli_test.go
              - src/cmd/ami/test_run_check_events_test.go
              - src/cmd/ami/test_run_human_per_test_lines_test.go
              - src/cmd/ami/test_default_ami_case_test.go
              - src/cmd/ami/test_flags_acceptance_test.go
              - src/cmd/ami/test_cli_conflict_on_subcommand_test.go
      - id: F-10-2
        name: Observability Hooks
        expectations:
          - id: E-10-2-1.6
            statement: |
              As an operator, I expect `diag.v1` emission with event-level IDs/timings, respecting redaction and
              producing deterministic JSON lines per §1.6.*.
            dependencies: [F-11-5]
            status: complete
            tests:
              - src/cmd/ami/events_schema_cmd_test.go
              - src/cmd/ami/events_validate_cmd_test.go
              - src/cmd/ami/errors_schema_cmd_test.go
              - src/cmd/ami/errors_validate_cmd_test.go
              - src/cmd/ami/test_runtime_kv_test.go
              - src/cmd/ami/test_runtime_kv_events_test.go
      - id: F-10-3
        name: Scheduler and Backpressure (Simulated)
        expectations:
          - id: E-10-3-1.4.4
            statement: |
              As a user, I expect deterministic scheduling honoring concurrency/backpressure pragmas with unit tests
              for block/drop policies per §1.4.4–1.4.6.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/lint_buffer_smells_test.go
              - src/cmd/ami/runtime_errorpipeline_test.go
      - id: F-10-4
        name: Runtime Test Harness
        expectations:
          - id: E-10-4
            statement: |
              As a user, I expect `ami test` to execute compiled tests/pipelines and emit JSON lines per event with a
              final summary, integrating AMI directives.
            dependencies: []
            status: complete

  - id: C-11
    name: build
    features:
      - id: F-11-1
        name: End-to-End Build
        expectations:
          - id: E-11-1
            statement: |
              As a user, I expect `ami build` to orchestrate frontend→IR→LLVM→object→link with deterministic artifacts,
              reproducible layouts, and JSON build plans; errors map to standardized exit codes with `diag.v1` streams.
            dependencies:
              - F-11-2
              - F-11-3
            status: complete
            docx: ["1.8.4"]
            tests:
              - src/cmd/ami/build_run_success_test.go
              - src/cmd/ami/build_link_exec_test.go
              - src/cmd/ami/build_link_flags_test.go
              - src/cmd/ami/build_link_darwin_arm64_test.go
              - src/cmd/ami/build_link_darwin_amd64_test.go
              - src/cmd/ami/build_link_linux_arm64_test.go
              - src/cmd/ami/build_link_fail_stderr_test.go
              - src/cmd/ami/build_no_link_env_test.go
              - src/cmd/ami/build_run_objects_nonverbose_test.go
              - src/cmd/ami/build_run_objects_s_test.go
              - src/cmd/ami/build_run_deps_ok_test.go
              - src/cmd/ami/build_run_deps_test.go
              - src/cmd/ami/build_run_json_diag_test.go
              - src/cmd/ami/build_run_json_sem_diags_test.go
              - src/cmd/ami/build_run_schema_error_test.go
              - src/cmd/ami/build_run_missing_root_json_test.go
              - src/cmd/ami/build_run_missing_root_human_test.go
              - src/cmd/ami/build_run_config_test.go
              - src/cmd/ami/build_dir_layout_test.go
              - src/cmd/ami/build_signature_test.go
              - src/cmd/ami/build_multi_package_repeatability_test.go
              - src/cmd/ami/build_run_json_verbose_objindex_test.go
              - src/cmd/ami/build_run_plan_verbose_test.go
              - src/cmd/ami/build_run_plan_json_verbose_test.go
              - src/cmd/ami/build_run_plan_env_objects_test.go
              - src/cmd/ami/build_run_plan_objindex_test.go

      - id: F-11-9
        name: POP Multiple Entrypoints and Error Pipelines
        expectations:
          - id: E-11-9-1.1.5
            statement: |
              As a compiler engineer, I expect multiple Ingress() entrypoints per package with 
              ingress-first/egress-last ordering and error pipeline routing per docx semantics.
            dependencies: [F-11-10, F-9-3]
            status: complete
            docx: ["1.1.5", "1.1.8"]

      - id: F-11-10
        name: IR Core Completeness
        expectations:
          - id: E-11-10-1.9
            statement: |
              As a compiler engineer, I expect IR to cover VAR/ASSIGN/RETURN/DEFER/EXPR, control flow, pipeline edges
              and RAII markers with deterministic JSON under build/debug.
            dependencies: []
            status: complete

      - id: F-11-11
        name: Event Lifecycle Metadata in IR
        expectations:
          - id: E-11-11-1.1.6
            statement: |
              As a runtime integrator, I expect IR to model event metadata (id, timestamp, attempt, trace context) to
              enable observability and diagnostics.
            dependencies: [F-11-10]
            status: complete

      - id: F-11-12
        name: Concurrency Declarations and Scheduling Hints
        expectations:
          - id: E-11-12-1.4
            statement: |
              As a runtime engineer, I expect IR and build artifacts to carry concurrency and scheduling hints honored
              by the runtime scheduler deterministically.
            dependencies: [F-11-10]
            status: complete
            docx: ["1.4.4", "1.4.5", "1.4.6"]

      - id: F-11-13
        name: Backpressure Policies on Edges
        expectations:
          - id: E-11-13-1.2.5
            statement: |
              As a runtime engineer, I expect edge buffer capacities and policies {block, dropOldest, dropNewest} to 
              be encoded and validated with deterministic behavior.
            dependencies: [F-11-10]
            status: complete

      - id: F-11-14
        name: Cross‑package Composition Contracts
        expectations:
          - id: E-11-14-1.3.4
            statement: |
              As a user, I expect type‑safe cross‑package composition with explicit version binding and 
              capability/trust boundaries enforced at build/link time.
            dependencies: [F-9-3]
            status: complete

      - id: F-11-15
        name: Imperative Functions (parameters/results)
        expectations:
          - id: E-11-15-2.2
            statement: |
              As a language user, I expect complete function semantics for parameters and multiple results with return
              checks and deterministic diagnostics.
            dependencies: [F-9-3]
            status: complete

      - id: F-11-16
        name: Imperative Control Flow
        expectations:
          - id: E-11-16-2.3
            statement: |
              As a language user, I expect structured control flow (if/else, loops) lowered to IR branches/loops
              deterministically.
            dependencies: [F-11-17]
            status: complete

      - id: F-11-17
        name: IR Control‑Flow Graph Constructs
        expectations:
          - id: E-11-17-1.10
            statement: |
              As a compiler engineer, I expect structured blocks and phis in IR preserving positions for diagnostics 
              and codegen.
            dependencies: [F-11-10]
            status: complete

      - id: F-11-18
        name: LLVM Emission Hardening
        expectations:
          - id: E-11-18
            statement: |
              As a backend engineer, I expect deterministic LLVM emission for control flow and extended expressions 
              while preserving memory‑safety guarantees.
            dependencies: [F-11-17]
            status: complete
            docx: ["1.8.4"]
            tests:
              - src/ami/compiler/codegen/llvm/cond_phi_test.go
              - src/ami/compiler/codegen/llvm/cmp_float_emit_test.go
              - src/ami/compiler/codegen/llvm/expr_edgecases_test.go
              - src/ami/compiler/codegen/llvm/expr_mod_double_test.go
              - src/ami/compiler/codegen/llvm/defer_lifo_multiblock_test.go
              - src/ami/compiler/codegen/llvm/defer_noexplicit_return_test.go
              - src/ami/compiler/codegen/llvm/extern_order_deterministic_test.go
              - src/ami/compiler/codegen/llvm/abi_backend_safety_test.go

      - id: F-11-19
        name: Runtime ABI Finalization
        expectations:
          - id: E-11-19-1.8.4
            statement: |
              As a runtime engineer, I expect finalized ABI for event/state, Owned<T>, entry and helpers with opaque
              handles and reproducible runtime objects.
            dependencies: [F-11-18]
            status: complete
            tests:
              - src/ami/compiler/codegen/llvm/runtime_zeroize_test.go
              - src/ami/compiler/codegen/llvm/runtime_owned_raii_test.go
              - src/ami/compiler/codegen/llvm/runtime_roundtrip_test.go
              - src/ami/compiler/codegen/llvm/runtime_link_test.go
              - src/ami/compiler/codegen/llvm/runtime_write_nomains_test.go
              - src/ami/compiler/codegen/llvm/entry_write_test.go

      - id: F-11-20
        name: Build E2E Hardening
        expectations:
          - id: E-11-20
            statement: |
              As a user, I expect `ami build` to orchestrate end‑to‑end across environments with stable JSON plans and
              deterministic artifacts beyond current scope.
            dependencies: [F-11-1]
            status: complete
            tests:
              - src/cmd/ami/build_run_plan_json_verbose_test.go
              - src/cmd/ami/build_run_plan_env_objects_test.go
              - src/cmd/ami/build_run_plan_objindex_test.go
              - src/cmd/ami/build_run_plan_deterministic_test.go

      - id: F-11-21
        name: Owned<T> Zeroization and Safety Hooks
        expectations:
          - id: E-11-21
            statement: |
              As a runtime engineer, I expect Owned<T> to zeroize on release/transfer and guard against double release
              with analyzer integration.
            dependencies: []
            status: complete
            docx: ["1.9.1"]

      - id: F-11-22
        name: Observability Hooks (runtime emission)
        expectations:
          - id: E-11-22-1.6
            statement: |
              As an operator, I expect the build/runtime path to support diag/log streams (diag.v1) with redaction
              controls and deterministic JSON lines.
            dependencies: [F-11-11]
            status: complete
            docx: ["1.6"]

      - id: F-11-23
        name: Scheduler and Worker‑pool Execution
        expectations:
          - id: E-11-23-1.4.4
            statement: |
              As a user, I expect a deterministic scheduler honoring concurrency/backpressure pragmas with tests using
              simulated sources.
            dependencies: [F-11-12, F-11-13]
            status: complete

      - id: F-11-24
        name: Edge Buffers with Backpressure
        expectations:
          - id: E-11-24
            statement: |
              As a runtime engineer, I expect bounded queues with {block, dropOldest, dropNewest} policies and
              counters/diagnostics.
            dependencies: [F-11-13]
            status: complete
            docx: ["1.4.4"]

      - id: F-11-25
        name: Merge Engine for Collect
        expectations:
          - id: E-11-25-2.4.0.0
            statement: |
              As a runtime engineer, I expect a merge engine implementing windowing, watermark, timeout, partitioning,
              and stability/tiebreakers enforcing orderability.
            dependencies: [F-11-4]
            status: complete

      - id: F-11-26
        name: Backend Safety Assertions
        expectations:
          - id: E-11-26
            statement: |
              As a user, I expect no public ABI exposes raw pointers; failing cases produce E_LLVM_EMIT diagnostics.
            dependencies: [F-11-18]
            status: complete
            docx: ["1.9.1"]

      - id: F-11-27
        name: Branching/Loop Lowering (Codegen)
        expectations:
          - id: E-11-27
            statement: |
              As a backend engineer, I expect IR CFG constructs lowered to LLVM with stable block ordering and phis.
            dependencies: [F-11-17]
            status: complete

      - id: F-11-28
        name: Stream Tool Diagnostics
        expectations:
          - id: E-11-28
            statement: |
              As a user, I expect compiler/tool/clang failures to stream as diag.v1 records with consistent exit‑code
              mapping.
            dependencies: [F-11-22]
            status: complete
            docx: ["1.6"]

      - id: F-11-29
        name: Security and Trust Boundaries
        expectations:
          - id: E-11-29-1.3.4
            statement: |
              As a user, I expect explicit capability/trust boundary declarations enforced at compile/link with
              diagnostics; no implicit propagation.
            dependencies: [F-11-14]
            status: complete
            docx: ["1.3.4"]

      - id: F-11-30
        name: Source Isolation and Sandboxing Hooks
        expectations:
          - id: E-11-30-1.2.3
            statement: |
              As a runtime integrator, I expect hooks for ingress/source sandboxing per policy (fs/net/device
              capabilities) with deterministic tests via simulated sources.
            dependencies: [F-11-23]
            status: complete
            docx: ["1.2.3"]

      - id: F-11-31
        name: Sensitive‑data Zeroization Policy
        expectations:
          - id: E-11-31
            statement: |
              As a security engineer, I expect a policy and implementation for zeroization across Owned<T>, buffers, 
              and node‑state with redacted observability.
            dependencies: [F-11-21]
            status: complete
            docx: ["1.9.1"]
            tests:
              - src/ami/compiler/codegen/llvm/runtime_zeroize_test.go
              - src/ami/compiler/codegen/llvm/runtime_owned_raii_test.go
              - src/ami/runtime/merge/zeroize_policy_test.go

      - id: F-11-32
        name: Minimal Examples and Docs Updates
        expectations:
          - id: E-11-32
            statement: |
              As a user, I expect a minimal end‑to‑end POP example to build/run across supported targets with docs
              updated.
            dependencies: [F-11-1]
            status: complete
            tests:
              - src/cmd/ami/examples_minimal_build_test.go

      - id: F-11-33
        name: Generic Constraints and Unification
        expectations:
          - id: E-11-33-2.1
            statement: |
              As a language user, I expect generic constraints (e.g., any) and conservative unification across 
              calls/returns with stable diagnostics (E_TYPE_UNINFERRED/E_TYPE_AMBIGUOUS) per §2.1.*.
            dependencies: [F-11-15]
            status: complete
            tests:
              - src/ami/compiler/sem/calls_generics_unify_test.go
              - src/ami/compiler/sem/calls_generics_unify_local_test.go
              - src/ami/compiler/sem/calls_generics_constraints_any_test.go
              - src/ami/compiler/sem/ambiguous_test.go
              - src/ami/compiler/sem/return_infer_test.go

      - id: F-11-34
        name: Type Inference M2/M3
        expectations:
          - id: E-11-34-2.1
            statement: |
              As a language user, I expect container element/key inference, tuple returns, and propagation through 
              Event<T>/Error<E> with conservative generic compatibility and stable positions in diagnostics per §2.1.*.
            dependencies: [F-11-15]
            status: complete
            tests:
              - src/ami/compiler/sem/inference_propagation_test.go
              - src/ami/compiler/sem/return_types_test.go
              - src/ami/compiler/sem/return_infer_containers_test.go
              - src/ami/compiler/sem/return_types_with_sigs.go
              - src/ami/compiler/sem/return_infer_generic_event_error_test.go
      - id: F-11-2
        name: Debug Artifacts (verbose)
        expectations:
          - id: E-11-2
            statement: |
              As a developer, I expect `--verbose` to emit resolved sources, AST/IR JSON, assembly, edges summaries, 
              activity logs, and manifest cross-references under `build/debug` only when verbose.
            dependencies: [F-11-3]
            status: complete
            tests:
              - src/cmd/ami/build_verbose_manifest_refs_test.go
              - src/cmd/ami/build_verbose_kvstore_test.go
              - src/cmd/ami/build_run_verbose_ast_test.go
              - src/cmd/ami/build_run_verbose_asm_test.go
              - src/cmd/ami/build_run_no_verbose_nodebug_test.go
      - id: F-11-3
        name: Workspace/Manifest Validation
        expectations:
          - id: E-11-3
            statement: |
              As a user, I expect workspace schema validation and integrity checks between `ami.manifest`, `ami.sum`, 
              and the cache with clear `E_WS_SCHEMA` and `E_INTEGRITY*` diagnostics.
            dependencies: [F-5-1]
            status: complete
            tests:
              - src/cmd/ami/build_manifest_integrity_test.go
              - src/cmd/ami/build_manifest_artifacts_test.go
              - src/cmd/ami/build_write_manifest_test.go
              - src/cmd/ami/build_write_manifest_env_objects_test.go
              - src/cmd/ami/build_write_manifest_env_objects_darwin_arm64_test.go
              - src/cmd/ami/build_integrity_diag_test.go
      - id: F-11-4
        name: Merge/Collect IR Extensions
        expectations:
          - id: E-11-4-2.4.0.0
            statement: |
              As a compiler engineer, I expect IR to encode sort keys, windows, watermarks, partitions, and 
              backpressure attributes for Collect nodes per §2.4.0.0.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/lint_merge_sort_test.go
      - id: F-11-5
        name: Runtime ABI Finalization
        expectations:
          - id: E-11-5-1.8.4
            statement: |
              As a runtime engineer, I expect finalized ABI for event/state, Owned<T>, and helpers with opaque handles
              and reproducible runtime objects per §1.8.4.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/runtime_parse_test.go
              - src/ami/compiler/codegen/llvm/runtime_zeroize_test.go
              - src/ami/compiler/codegen/llvm/runtime_owned_raii_test.go
              - src/ami/compiler/codegen/llvm/runtime_roundtrip_test.go
              - src/ami/compiler/codegen/llvm/runtime_link_test.go
      - id: F-11-6
        name: Target linux/arm64
        expectations:
          - id: E-11-6
            statement: |
              As a user, I expect linux/arm64 builds to compile and link with deterministic artifacts when toolchains 
              are available, and that all artifacts will be statically linked.
            dependencies: [F-11-5]
            status: complete
            tests:
              - src/cmd/ami/build_link_linux_arm64_test.go
      - id: F-11-7
        name: Target darwin/amd64
        expectations:
          - id: E-11-7
            statement: |
              As a user, I expect darwin/amd64 builds to compile and link with deterministic artifacts when 
              toolchains are available, and that all artifacts will be statically linked.
            dependencies: [F-11-5]
            status: complete
            tests:
              - src/cmd/ami/build_link_darwin_amd64_test.go
      - id: F-11-8
        name: Target linux/amd64
        expectations:
          - id: E-11-8
            statement: |
              As a user, I expect linux/amd64 builds to compile and link with deterministic artifacts when toolchains 
              are available, and that all artifacts will be statically linked.
            dependencies: [F-11-5]
            status: complete
            tests:
              - src/cmd/ami/build_link_exec_test.go
          - id: E-11-9
            statement: |
              As a user, I expect I can build an executable linux/amd64 binary test POP/AMI program and run it 
              successfully in a docker container in order to validate compiler/linker operation, and I expect that
              the binary will run with no external dependencies beyond the operating system.
            dependencies: [F-11-5]
            status: complete
            tests:
              - src/cmd/ami/build_link_exec_test.go

  - id: C-12
    name: pipeline visualize
    features:
      - id: F-12-1
        name: ASCII and JSON Graphs
        expectations:
          - id: E-12-1
            statement: |
              As a user, I expect `ami pipeline visualize` to render deterministic ASCII graphs in human mode 
              and `graph.v1` JSON in machine mode, detecting cycles as `E_GRAPH_CYCLE` and exiting non-zero.
            dependencies: []
            status: complete
            docx: ["1.8.2"]
            tests:
              - src/cmd/ami/pipeline_cmd_test.go
              - src/cmd/ami/pipeline_visualize_ascii_test.go
              - src/cmd/ami/pipeline_visualize_json_test.go
              - src/cmd/ami/pipeline_visualize_cycle_json_test.go
              - src/cmd/ami/pipeline_visualize_json_exclude_test.go
              - src/cmd/ami/pipeline_visualize_json_nosummary_test.go
              - src/cmd/ami/pipeline_visualize_filter_test.go

  - id: C-13
    name: version
    features:
      - id: F-13-1
        name: Version Reporting
        expectations:
          - id: E-13-1
            statement: |
              As a user, I expect `ami version` to report the build-time injected version (ldflags) consistently.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/version_cmd_test.go
              - src/cmd/ami/version_cmd_json_test.go

  - id: C-14
    name: help
    features:
      - id: F-14-1
        name: Embedded Help Content
        expectations:
          - id: E-14-1
            statement: |
              As a user, I expect `ami help` to display embedded content sourced from `docs/toolchain/help-guide/**/*.md` via 
              `go:embed` with consistent formatting and paging behavior.
            dependencies: []
            status: complete
            tests:
              - src/cmd/ami/help_cmd_test.go
              - src/cmd/ami/help_content_test.go
              - src/cmd/ami/examples_help_test.go
              - src/cmd/ami/help_examples_test.go

      - id: F-14-2
        name: Gaps Reconciliation
        expectations:
          - id: E-14-2
            statement: |
              As a maintainer, I expect the YAML and docx gaps to be captured and reconciled, with missing features 
              listed explicitly in this YAML and tracked to closure.
            dependencies: []
            status: complete
            tests:
              - docs/gaps.md

cross_cutting:
  gates:
    - id: CC-1
      statement: |
        All features must maintain ≥0.80 coverage on changed packages with happy and sad path tests; `go vet`, 
        `go test`, and build must be green.
      status: complete
  risks:
    - id: CC-2
      statement: |
        No public ABI may expose raw pointers; enforce via codegen safety assertions and tests.
      status: complete
    - id: CC-3
      statement: |
        All memory must be allocated and managed in an RAII compliant manner.
      status: complete

stdlib:
  - id: S-1
    name: io package
    features:
      - id: F-1-1
        name: Stdlib File Input / Output
        expectations:
          - id: E-1-1-1
            statement: |
              As a user, I expect the stdlib to have a built-in `io` package for file input and output.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go
              - src/ami/runtime/host/io/more_coverage_test.go

          - id: E-1-1-2
            statement: |
              As a user, I expect that AMI `io` package will have a file handle object (FHO) representing a file and 
              its underlying file handle.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

          - id: E-1-1-3
            statement: |
              As a user, I expect the AMI `io` package to have an `io.OpenFile(...)` function comparable to Go's
              `os.Open(...)`, except that it returns an `io.FHO` and error object rather than a file handle pointer.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

          - id: E-1-1-4
            statement: |
              As a user, I expect that AMI `io.FHO` type will manage all file I/O for its given file; the io.FHO 
              will have a .Close() method to close the file/handle, after which it should be freed in memory and 
              unusable; the io.FHO object should have .Read(), .ReadBytes(), .Write(), .WriteBytes(), .Seek() and 
              other such functions as needed to perform file I/O.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

          - id: E-1-1-5
            statement: |
              As a user, I expect `io.FHO` operations to be safe and deterministic: after .Close(), any subsequent
              .Read(), .ReadBytes(), .Write(), .WriteBytes(), .Seek(), .Flush(), or .Truncate() call must fail with an
              error indicating the handle is closed; .Read()/.Write() return the number of bytes processed and a 
              non-nil error on partial operations; and .Seek(offset, whence) follows standard POSIX whence semantics.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go
              - src/ami/runtime/host/io/more_coverage_test.go

          - id: E-1-1-6
            statement: |
              As a user, I expect the AMI `io.FHO` type will have a .Length() method which will return the file size,
              a .Pos() method which returns the current file position for read/write operations, a .Truncate() method
              used to truncate the file.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go
              - src/ami/runtime/host/io/more_coverage_test.go

          - id: E-1-1-7
            statement: |
              As a user, I expect the AMI `io.FHO` type will have a .Flush() method to flush file buffers to disk.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

          - id: E-1-1-8
            statement: |
              As a user, I expect the AMI `io` package will have a `CreateTemp([dir string][,suffix string])` function 
              to create a temporary file and return the `io.FHO` object used to manage the file content; and the `dir`
              directory string will be relative to the system temporary directory.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

          - id: E-1-1-9
            statement: |
              As a user, I expect the AMI `io` package will have a `CreateTempDir()` function to create a temporary
              directory and return the directory path (string); and the temporary directory will be created relative to
              the system temporary directory.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

          - id: E-1-1-10
            statement: |
              As a user, I expect the AMI `io` package will have a Stat(fileName string) function which will return
              a struct containing the file information about the given fileName.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

      - id: F-1-2
        name: Stdlib Console Input / Output
        expectations:
          - id: E-1-2-1
            statement: |
              As a user, I expect the AMI `io` package will have a special FHO called io.Stdin for reading from stdin;
              and this FHO will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go
              - src/ami/runtime/host/io/more_coverage_test.go

          - id: E-1-2-2
            statement: |
              As a user, I expect the AMI `io` package will have a special FHO called io.Stdout for writing to
              stdout; and this FHO will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

          - id: E-1-2-3
            statement: |
              As a user, I expect the AMI `io` package will have a special FHO called io.Stderr for writing to
              stderr; and this FHO will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_test.go

      - id: F-1-3
        name: Stdlib Network Input / Output
        expectations:
          - id: E-1-3-1
            statement: |
              As a user, I expect the AMI `io` package will provide a network `io.Socket` handle type that is
              equivalent to an `io.FHO`, representing a socket opened for input/output with the same methods and
              properties as a file `io.FHO` where applicable.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/socket_udp_test.go
              - src/ami/runtime/host/io/socket_tcp_test.go
              - src/ami/runtime/host/io/socket_read_test.go
              - src/ami/runtime/host/io/socket_tcp_listen_test.go
              - src/ami/runtime/host/io/more_coverage_test.go

          - id: E-1-3-2
            statement: |
              As a user, I expect the AMI `io` package will have an `io.OpenSocket(proto io.NetProtocol, addr string,
              port uint16)` function to open a network socket handle (FHO-equivalent) for a given protocol (e.g., ICMP,
              UDP, TCP), host IP,
              and port.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/socket_udp_test.go
              - src/ami/runtime/host/io/socket_tcp_test.go
              - src/ami/runtime/host/io/socket_tcp_listen_test.go

          - id: E-1-3-3
            statement: |
              As a user, I expect the AMI `io.Socket` handle to support .Close() to close the socket; .Write() to
              write messages to the socket buffer; .Send() to send buffered contents; and .Listen() to register a
              handler invoked for incoming network traffic, mirroring `io.FHO` semantics where applicable.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/socket_udp_test.go
              - src/ami/runtime/host/io/socket_tcp_test.go
              - src/ami/runtime/host/io/socket_helpers_test.go

          - id: E-1-3-4
            statement: |
              As a user, I expect the AMI `io` package will have an `io.Hostname()` method which will return the 
              current hostname of the underlying system.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_network_test.go

          - id: E-1-3-5
            statement: |
              As a user, I expect the AMI `io` package will have an `io.Interfaces()` method which will list all
              network interfaces.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/io/file_network_test.go

      - id: F-1-4
        name: I/O POP Capability Enforcement
        expectations:
          - id: E-1-4-1
            statement: |
              As a user, I expect the AMI `io` package will enforce all I/O capabilities, as defined for
              the pipeline and the POP paradigm generally; only Ingress or egress nodes can use the io package,
              and only ingress and egress nodes can use the I/O features specifically allowed in their capabilities
              attributes.
            dependencies: [F-11-23]
            status: complete
            tests:
              # Driver/IR-level capability + position enforcement
              - src/ami/compiler/driver/capabilities_test.go
              - src/ami/compiler/driver/capabilities_driver_test.go
              # CLI JSON diagnostic streaming parity (build path)
              - src/cmd/ami/build_capability_trust_diag_test.go

  - id: S-2
    name: os package exec()
    features:
      - id: F-2-1
        name: Stdlib Operating System Interface (Process Runner)
        expectations:
          - id: E-2-1-1
            statement: |
              As a user, I expect the stdlib to have a built-in `os` package for interacting with the operating system.
            dependencies: []
            status: complete
            tests: []

          - id: E-2-1-2
            statement: |
              As a user, I expect the AMI `os` package will have a `Process` object type used to represent a process
              spawned by the program; the os.Process type will be used to manage the process lifecycle.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/process_test.go
              - src/ami/runtime/host/os/process_io_kill_test.go
              - src/ami/runtime/host/os/process_helpers_test.go
              - src/ami/runtime/host/os/process_kill_unix_test.go

          - id: E-2-1-3
            statement: |
              As a user, I expect the AMI `os` package will have an `Exec()` which will initialize a given external 
              program and return a os.Process object and error object; the os.Process object will be used to manage
              the process lifecycle; and the Exec() function will initialize but NOT start the new process.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/process_test.go
              - src/ami/runtime/host/os/process_helpers_test.go

          - id: E-2-1-4
            statement: |
              As a user, I expect the AMI `os.Process` object type will have a .Kill() method to immediately terminate
              the process, a .Status() method to return process state information (as a struct), a .Stdin() method for
              interacting over stdin, a .Stdout() and .Stderr() method for obtaining process outputs on stdout and
              stderr, a .Pid() method for obtaining the process id, and a .Start() method to launch the process.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/process_test.go
              - src/ami/runtime/host/os/process_io_kill_test.go
              - src/ami/runtime/host/os/process_helpers_test.go

          - id: E-2-1-5
            statement: |
              As a user, I expect the AMI `os.Process` .Start() method will accept an optional boolean value to 
              indicate whether it blocks or runs the executed process asynchronously.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/process_test.go
              - src/ami/runtime/host/os/process_helpers_test.go

          - id: E-2-1-6
            statement: |
              As a user, I expect that AMI `os` package will have an `os.SystemStats()` method return a struct
              describing the system's hardware.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/system_test.go
              - src/ami/runtime/host/os/watch_test.go

  - id: S-3
    name: os package (general)
    features:
      - id: F-3-1
        name: environment variable
        expectations:
          - id: E-3-1-1
            statement: |
              As a user, I expect the AMI os package to have a .GetEnv() method which will return the value of an
              environment variable given the environment variable name.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/env_test.go
              - src/ami/runtime/host/os/process_helpers_test.go

          - id: E-3-1-2
            statement: |
              As a user, I expect the AMI os package to have a .SetEnv() method which will set the value of an
              environment variable given the environment variable name.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/env_test.go
              - src/ami/runtime/host/os/process_helpers_test.go

          - id: E-3-1-3
            statement: |
              As a user, I expect the AMI os package to have a .ListEnv() method which will return a list of 
              environment variable names (not their values).
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/os/env_test.go
              - src/ami/runtime/host/os/process_helpers_test.go

  - id: S-4
    name: signal package (AMI stdlib)
    features:
      - id: F-4-1
        name: signal handler
        expectations:
          - id: E-4-1-1
            statement: |
              As a user, I expect there to be an AMI 'signal' package which will provide signal handling facilities.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/signal/signal_test.go
              - src/ami/runtime/host/signal/more_signal_test.go
              - src/ami/compiler/driver/signal_enable_llvm_test.go

          - id: E-4-1-2
            statement: |
              As a user, I expect there to be a built-in `SignalType` enum data type representing each operating 
              system signal (e.g., SIGINT, SIGTERM, etc.).
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/signal/signal_test.go
              - src/ami/runtime/host/signal/more_signal_test.go
              - src/ami/compiler/driver/signal_mapping_more_llvm_test.go

          - id: E-4-1-3
            statement: |
              As a user, I expect there to be a `signal.Register(sig SignalType, fn func())` function which will 
              register a signal handler function for a given os signal.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/signal/signal_test.go
              - src/ami/runtime/host/signal/more_signal_test.go
              - src/ami/compiler/driver/signal_register_llvm_test.go
              - src/ami/compiler/driver/signal_register_immediate_llvm_test.go
              - src/ami/compiler/driver/signal_register_selector_llvm_test.go
              - src/ami/compiler/driver/signal_register_fallback_llvm_test.go

  - id: S-5
    name: time package (AMI stdlib)
    features:
      - id: F-5-1
        name: time handler
        expectations:
          - id: E-5-1-1
            statement: |
              As a user, I expect there to be an AMI 'time' package which will provide time clock facilities
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

          - id: E-5-1-2
            statement: |
              As a user, I expect there to be a `time.Sleep(d time.Duration)` function which will cause the program to
              sleep for duration d; `time.Duration` follows Go's pattern and units (ns, us, ms, s, m, h).
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

          - id: E-5-1-3
            statement: |
              As a user, I expect there to be a `time.Time` object representing a time/date value.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

          - id: E-5-1-4
            statement: |
              As a user, I expect there to be a `time.Now()` function which will return the current `time.Time` object
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

          - id: E-5-1-5
            statement: |
              As a user, I expect there to be a `time.Delta(t1, t2 time.Time)` function which will return the time
              difference between t1 and t2.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

          - id: E-5-1-6
            statement: |
              As a user, I expect there to be a `time.Add(t time.Time, d time.Duration)` function which will return
              the time t advanced by duration d.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

          - id: E-5-1-7
            statement: |
              As a user, I expect the `time.Time` object to have a .Unix() method which returns a unix timestamp in
              seconds.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

          - id: E-5-1-8
            statement: |
              As a user, I expect the `time.Time` object to have a .UnixNano() method which returns a unix timestamp in
              nanoseconds.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/time_test.go

      - id: F-5-2
        name: time handler
        expectations:
          - id: E-5-2-1
            statement: |
              As a user, I expect the `time` package will have a `Ticker` object returned by 
              `NewTicker(d time.Duration)`; d uses `time.Duration` with Go-style units; the object executes a 
              registered function for every clock tick event.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/ticker_test.go
              - src/ami/runtime/host/time/ticker_more_test.go

          - id: E-5-2-2
            statement: |
              As a user, I expect the `time.Ticker` object will have a `.Start()` method to start the ticker generating
              tick events.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/ticker_test.go
              - src/ami/runtime/host/time/ticker_more_test.go

          - id: E-5-2-3
            statement: |
              As a user, I expect the `time.Ticker` object will have a `.Stop()` method to stop the ticker from 
              generating tick events.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/ticker_test.go
              - src/ami/runtime/host/time/ticker_more_test.go

          - id: E-5-2-4
            statement: |
              As a user, I expect the `time.Ticker` object will have a `.Register(f func())` method to execute for 
              each timer tick event.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/time/ticker_test.go
              - src/ami/runtime/host/time/ticker_more_test.go

  - id: S-6
    name: trigger package
    features:
      - id: F-6-1
        name: trigger facility for ingress nodes.
        expectations:
          - id: E-6-1-1
            statement: |
              As a user, I expect AMI to have a built-in `trigger` package which will provide trigger event facilities
              for Ingress node `in` attribute.
            dependencies: [F-11-11, F-11-23]
            status: complete
            tests:
              - src/ami/runtime/host/trigger/timer_schedule_test.go
              - src/ami/runtime/host/trigger/fsnotify_test.go
              - src/ami/runtime/host/trigger/fsnotify_interval_env_test.go
              - src/ami/runtime/host/trigger/netlisten_tcp_test.go
              - src/ami/runtime/host/trigger/netlisten_udp_test.go

      - id: F-6-2
        name: trigger facility for Time-based events
        expectations:
          - id: E-6-2-1
            statement: |
              As a user, I expect AMI to have a `trigger.Timer(d time.Duration)` method which will emit an
              Event<time.Time> object every d units of time; `time.Duration` follows Go's pattern and units.
            dependencies: [F-11-23]
            status: complete
            tests:
              - src/ami/runtime/host/trigger/timer_schedule_test.go

          - id: E-6-2-2
            statement: |
              As a user, I expect AMI to have a `trigger.Schedule(t time.Time)` method which will emit an 
              Event<time.Time> object at t time.
            dependencies: [F-11-23]
            status: complete
            tests:
              - src/ami/runtime/host/trigger/timer_schedule_test.go

      - id: F-6-3
        name: trigger facility for Filesystem Events
        expectations:
          - id: E-6-3-1
            statement: |
              As a user, I expect AMI to have a `trigger.FsEvent` enum representing a generic set of inotify events
              common to linux, windows and MacOS platforms.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/trigger/fs.go
              - src/ami/runtime/host/trigger/fsnotify_test.go

          - id: E-6-3-2
            statement: |
              As a user, I expect AMI to have a `trigger.FileEvent` object containing a file handle object (FHO),
              the `trigger.FsEvent` and event timestamp.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/trigger/fs.go
              - src/ami/runtime/host/trigger/fsnotify_test.go

          - id: E-6-3-4
            statement: |
              As a user, I expect AMI to have a `trigger.FsNotify(path string, t trigger.FsEvent)` method which will 
              emit an `Event<trigger.FileEvent>` object when a file system operation of type `trigger.FsEvent` occurs 
              on the given `path`,
            dependencies: [F-11-23]
            status: complete
            tests:
              - src/ami/runtime/host/trigger/fsnotify_test.go
              - src/ami/runtime/host/trigger/fsnotify_interval_env_test.go

      - id: F-6-4
        name: trigger facility for Network Events
        expectations:
          - id: E-6-4-1
            statement: |
              As a user, I expect AMI to have a `trigger.NetListen(proto io.NetProtocol, addr string, port uint16)`
              method which will emit an `Event<trigger.NetMsg>` object when a network message is received; where
              `trigger.NetMsg` will contain the contents of a network message and timestamp.
            dependencies: [F-11-23]
            status: complete
            tests:
              - src/ami/runtime/host/trigger/netlisten_tcp_test.go
              - src/ami/runtime/host/trigger/netlisten_udp_test.go

          - id: E-6-4-2
            statement: |
              As a user, I expect AMI to define a `trigger.NetMsg` object containing the message payload, protocol,
              remote and local addresses/ports, and an event timestamp.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/trigger/net.go

          - id: E-6-4-3
            statement: |
              As a user, I expect `trigger.NetListen(...)` emissions to include enough metadata for handlers to route
              by protocol or address and to be compatible with backpressure policies in the runtime event pipeline.
            dependencies: [F-11-23, F-11-24]
            status: complete
            tests:
              - src/ami/runtime/host/trigger/netlisten_tcp_test.go
              - src/ami/runtime/host/trigger/netlisten_udp_test.go

  - id: S-7
    name: math package
    features:
      - id: F-7-1
        name: Core Float Math
        expectations:
          - id: E-7-1-1
            statement: |
              As a user, I expect a stdlib `math` package modeled on Go's math as a baseline, operating on `float64`
              with deterministic behavior across platforms and consistent with the AMI authoritative semantics.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/runtime/host/math/more_math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-1-2
            statement: |
              As a user, I expect `math.Abs(x float64) float64`, `math.Max(x, y float64) float64`, and
              `math.Min(x, y float64) float64` to behave like Go, including NaN propagation rules.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-1-3
            statement: |
              As a user, I expect rounding helpers `math.Ceil(x)`, `math.Floor(x)`, `math.Trunc(x)`, and
              `math.Round(x)`, `math.RoundToEven(x)` to be available with Go-aligned semantics.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/runtime/host/math/more_math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-1-4
            statement: |
              As a user, I expect `math.Mod(x, y float64) float64` to match Go semantics (sign of result follows x),
              and `math.Remainder(x, y float64) float64` to implement IEEE 754 remainder.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_more_ami_test.go

      - id: F-7-2
        name: Exp, Log, Pow, Sqrt
        expectations:
          - id: E-7-2-1
            statement: |
              As a user, I expect exponentials `math.Exp(x)`, `math.Expm1(x)`, and `math.Exp2(x)` to be provided with
              Go-compatible edge-case handling (Inf, NaN).
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-2-2
            statement: |
              As a user, I expect logarithms `math.Log(x)`, `math.Log10(x)`, `math.Log1p(x)`, and `math.Log2(x)` with
              Go-compatible domains and NaN/Inf behavior.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-2-3
            statement: |
              As a user, I expect `math.Pow(x, y) float64`, `math.Pow10(n int) float64`, and `math.Sqrt(x) float64`
              with the same corner-case handling as Go (including negative, zero, Inf, and NaN inputs).
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

      - id: F-7-3
        name: Trigonometric and Hyperbolic
        expectations:
          - id: E-7-3-1
            statement: |
              As a user, I expect trigonometric functions `math.Sin`, `math.Cos`, `math.Tan`, and combined 
              `math.Sincos` with Go-compatible precision and special case behavior.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-3-2
            statement: |
              As a user, I expect inverse trig functions `math.Asin`, `math.Acos`, `math.Atan`, and `math.Atan2` with
              Go-aligned range and domain semantics.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/runtime/host/math/more_math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-3-3
            statement: |
              As a user, I expect hyperbolic functions `math.Sinh`, `math.Cosh`, and `math.Tanh` with Go-compatible
              edge-case handling.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_even_more_ami_test.go

      - id: F-7-4
        name: Special Values and Classification
        expectations:
          - id: E-7-4-1
            statement: |
              As a user, I expect `math.NaN() float64` and `math.Inf(sign int) float64` to construct special values,
              and that operations propagate NaN/Inf consistent with IEEE‑754 and Go's behavior.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_remaining_ami_test.go

          - id: E-7-4-2
            statement: |
              As a user, I expect classification and manipulation helpers: `math.IsNaN(x)`, `math.IsInf(x, sign)`,
              `math.Signbit(x)`, `math.Copysign(x, y)`, and `math.Nextafter(x, y)`.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/runtime/host/math/more_math_test.go
              - src/ami/compiler/driver/stdlib_math_even_more_ami_test.go

          - id: E-7-4-3
            statement: |
              As a user, I expect decomposition helpers `math.Frexp(x) (frac float64, exp int)`,
              `math.Ldexp(frac float64, exp int) float64`, and `math.Modf(x) (intPart, fracPart float64)`.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/runtime/host/math/more_math_test.go
              - src/ami/compiler/driver/stdlib_math_more_ami_test.go

      - id: F-7-5
        name: Mathematical Constants
        expectations:
          - id: E-7-5-1
            statement: |
              As a user, I expect common constants aligned with Go: `math.Pi`, `math.E`, `math.Phi`, `math.Sqrt2`,
              `math.Ln2`, `math.Ln10`, `math.Log2E`, and `math.Log10E`.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/math/math_test.go
              - src/ami/compiler/driver/stdlib_math_ami_test.go

      - id: F-8
        name: Multi-Result IR/LLVM and Full math Lowering
        expectations:
          - id: E-8-1
            statement: |
              As a compiler engineer, I expect the IR to represent multi-result expressions and calls by extending
              `ir.Expr` with `Results []ir.Value` (retaining `Result *ir.Value` for single returns) and updating
              IR JSON encoding to include multi-result signatures for calls.
            dependencies: []
            status: ready
            tests:
              - src/ami/compiler/ir/encode_expr_call_test.go

          - id: E-8-2
            statement: |
              As a compiler engineer, I expect lowering to produce `Expr.Results` for multi-result calls using
              known function signatures, and for `return` lowering to collect/expand multi-result expressions so that
              `ir.Return{Values: ...}` receives the correct arity and types.
            dependencies: [F-8-1]
            status: ready
            tests:
              - src/ami/compiler/driver/return_tuple_aggregate_summary_test.go
              - src/ami/compiler/driver/return_tuple_mixed_summary_paths_test.go

          - id: E-8-3
            statement: |
              As a backend engineer, I expect the LLVM emitter to support multi-result functions by emitting
              aggregate return types `{T0,T1,...}`, constructing returns via `insertvalue`, and consuming call results
              via `extractvalue`. Calls with multiple results emit `call {…}` then `extractvalue` into SSA temps.
              User function ABIs must not expose raw pointers; pointer-like types map to safe integer or opaque
              handles as appropriate.
            dependencies: [F-8-1]
            status: ready
            tests:
              - src/ami/compiler/codegen/llvm/module_test.go
              - src/ami/compiler/codegen/llvm/cond_phi_test.go

          - id: E-8-4
            statement: |
              As a language implementer, I expect stdlib `math` lowering to be end-to-end without stubs:
              single-result functions map to LLVM intrinsics (e.g., `llvm.fabs.f64`, `llvm.minnum.f64`, `llvm.maxnum.f64`,
              `llvm.ceil.f64`, `llvm.floor.f64`, `llvm.trunc.f64`, `llvm.exp.f64`, `llvm.exp2.f64`, `llvm.log.f64`,
              `llvm.log2.f64`, `llvm.log10.f64`, `llvm.sqrt.f64`, `llvm.pow.f64`, `llvm.sin.f64`, `llvm.cos.f64`,
              `llvm.tan.f64`, `llvm.sinh.f64`, `llvm.cosh.f64`, `llvm.tanh.f64`, `llvm.copysign.f64`,
              `llvm.nextafter.f64`), and multi-result functions `Sincos`, `Frexp`, and `Modf` lower to either
              intrinsics/IR sequences or runtime helpers returning aggregates.
            dependencies: [F-7-1, F-7-2, F-7-3, F-7-4, F-7-5, F-8-1, F-8-3]
            status: ready
            tests:
              - src/ami/compiler/driver/time_intrinsics_llvm_test.go
              - src/ami/runtime/host/math/math_test.go

          - id: E-8-5
            statement: |
              As a runtime engineer, I expect deterministic runtime helpers for math multi-returns when intrinsics
              are insufficient or to ensure portability: `ami_rt_math_sincos(double)->{double,double}`,
              `ami_rt_math_frexp(double)->{double,i64}`, and `ami_rt_math_modf(double)->{double,double}` implemented
              in `runtime.ll` using portable IR and LLVM intrinsics where possible.
            dependencies: [F-8-3]
            status: ready
            tests:
              - src/ami/compiler/codegen/llvm/runtime_roundtrip_test.go

          - id: E-8-6
            statement: |
              As a maintainer, I expect removal of `math` builtin stubs and any codegen skips: the compiler should
              import and fully lower/emit `math` without relying on stub packages.
            dependencies: [F-8-1, F-8-3, F-8-4]
            status: ready
            tests: []

          - id: E-8-7
            statement: |
              As a developer, I expect comprehensive tests and documentation for the new capabilities: IR encode tests
              for multi-result calls, LLVM emission tests for aggregate returns and `extractvalue`, and e2e compile
              tests covering `math.Sincos`, `math.Frexp`, and `math.Modf`. Update `docs/language/stdlib/math.md` to
              reflect deterministic behavior and implementation notes.
            dependencies: [F-8-1, F-8-3, F-8-4]
            status: ready
            tests:
              - src/ami/compiler/codegen/llvm/module_test.go
              - tests/e2e (new cases TBD)

  - id: S-8
    name: gpu package
    features:
      - id: F-8-1
        name: GPU Kernel Execution (Transform)
        expectations:
          - id: E-8-1-1
            statement: |
              As a user, I expect a stdlib `gpu` package that enables Transform nodes to execute GPU kernels with
              deterministic integration into the runtime scheduler and event model.
            dependencies: [F-11-23, F-11-22, F-11-11]
            status: ready
            tests: []
          - id: E-8-1-2
            statement: |
              As a user, I expect that if the compiler detects a program imports the `gpu` package and uses it in an AMI
              program, the compiler will generate LLVM code which will execute at program startup to detect the GPU type
              on a host running the program; the program should use this global GPU detection to ensure the binary
              executable invokes the proper GPU facilities (e.g. CUDA, Apple Metal, etc.); the compiler/optimizer should
              eliminate certain GPU facilities known to be impossible.  For example: when compiling a darwin/arm64
              binary, the compiler would only include Apple Metal, while compiling for darwin/amd64, ROCm support would
              be necessary.  Likewise, when compiling linux/amd64, CUDA or ROCm would be supported possibilities. Any
              resulting binary should have runtime conditional logic to enable/disable the detected GPU platform.
            dependencies: [F-8-1]
            status: ready
            tests: []


      - id: F-8-2
        name: CUDA Backend (Cuda*)
        expectations:
          - id: E-8-2-1
            statement: |
              As a user, I expect CUDA discovery helpers: `gpu.CudaAvailable() bool` and `gpu.CudaDevices() 
              []gpu.Device`.
            dependencies: []
            status: ready
            tests:
              - src/ami/runtime/host/gpu/cuda_discovery_test.go
              - src/ami/runtime/host/gpu/cuda_env_test.go

          - id: E-8-2-2
            statement: |
              As a user, I expect context management: `gpu.CudaCreateContext(dev gpu.Device) (gpu.Context, error)` and
              `gpu.CudaDestroyContext(ctx gpu.Context) error` with Owned<T> semantics.
            dependencies: [F-11-21]
            status: ready
            tests:
              - src/ami/runtime/host/gpu/cuda_owned_handles_test.go
              - src/ami/runtime/host/gpu/stub_paths_test.go
              - src/ami/runtime/host/gpu/cuda_error_paths_test.go
          - id: E-8-2-3
            statement: |
              As a user, I expect buffer and transfer APIs: `gpu.CudaAlloc(n int) (gpu.Buffer, error)`,
              `gpu.CudaFree(buf gpu.Buffer) error`, `gpu.CudaMemcpyHtoD(dst gpu.Buffer, src []byte) error`, and
              `gpu.CudaMemcpyDtoH(dst []byte, src gpu.Buffer) error` to perform argument validation and deterministic
              erroring on invalid inputs under stubbed backends.
            dependencies: [F-11-21]
            status: in_progress
            tests:
              - src/ami/runtime/host/gpu/cuda_args_test.go
              - src/ami/runtime/host/gpu/stub_paths_test.go
          - id: E-8-2-4
            statement: |
              As a user, I expect kernel APIs with deterministic validation: `gpu.CudaLoadModule`, `gpu.CudaGetKernel`,
              and `gpu.CudaLaunchKernel` validate inputs and signal `ErrInvalidHandle` for invalid args under stubs.
            dependencies: [F-11-21]
            status: in_progress
            tests:
              - src/ami/runtime/host/gpu/cuda_args_test.go
              - src/ami/runtime/host/gpu/launch_blocking_test.go

          - id: E-8-2-3
            statement: |
              As a user, I expect buffer and transfer APIs: `gpu.CudaAlloc(n int) (gpu.Buffer, error)`,
              `gpu.CudaFree(buf gpu.Buffer) error`, `gpu.CudaMemcpyHtoD(dst gpu.Buffer, src []byte) error`, and
              `gpu.CudaMemcpyDtoH(dst []byte, src gpu.Buffer) error`.
            dependencies: [F-11-21]
            status: ready
            tests: []

          - id: E-8-2-4
            statement: |
              As a user, I expect kernel APIs: `gpu.CudaLoadModule(ptx string) (gpu.Module, error)`,
              `gpu.CudaGetKernel(mod gpu.Module, name string) (gpu.Kernel, error)`, and
              `gpu.CudaLaunchKernel(ctx gpu.Context, k gpu.Kernel, grid, block [3]uint32, sharedMem uint32, 
              args ...any) error`.
            dependencies: [F-11-21]
            status: ready
            tests: []

      - id: F-8-3
        name: Apple Metal Backend (Metal*)
        expectations:
          - id: E-8-3-1
            statement: |
              As a user, I expect Metal discovery helpers: `gpu.MetalAvailable() bool` and 
              `gpu.MetalDevices() []gpu.Device`.
            dependencies: []
            status: complete
            tests:
              - src/ami/runtime/host/gpu/metal_darwin_test.go
              - src/ami/runtime/host/gpu/metal_scalar_test.go
              - src/ami/runtime/host/gpu/metal_slice_i8_test.go
              - src/ami/runtime/host/gpu/metal_slice_i32_test.go
              - src/ami/runtime/host/gpu/metal_slice_u16_test.go
              - src/ami/runtime/host/gpu/metal_slice_u32_test.go
              - src/ami/runtime/host/gpu/metal_slice_u8_test.go
              - src/ami/runtime/host/gpu/metal_slice_f32_test.go
              - src/ami/runtime/host/gpu/metal_release_test.go

          - id: E-8-3-2
            statement: |
              As a user, I expect context management: `gpu.MetalCreateContext(dev gpu.Device) (gpu.Context, error)` and
              `gpu.MetalDestroyContext(ctx gpu.Context) error` with Owned<T> semantics.
            dependencies: [F-11-21]
            status: complete
            tests:
              - src/ami/runtime/host/gpu/metal_darwin_test.go
              - src/ami/runtime/host/gpu/metal_release_test.go

          - id: E-8-3-3
            statement: |
              As a user, I expect shader and pipeline APIs: `gpu.MetalCompileLibrary(src string) (gpu.Library, error)`,
              `gpu.MetalCreatePipeline(lib gpu.Library, name string) (gpu.Pipeline, error)`, and
              `gpu.MetalDispatch(ctx gpu.Context, p gpu.Pipeline, grid, threadsPerGroup [3]uint32, args ...any) error`.
            dependencies: [F-11-21]
            status: complete
            tests:
              - src/ami/runtime/host/gpu/metal_compute_test.go
              - src/ami/runtime/host/gpu/metal_scalar_test.go
              - src/ami/runtime/host/gpu/metal_slice_i8_test.go
              - src/ami/runtime/host/gpu/metal_slice_i32_test.go
              - src/ami/runtime/host/gpu/metal_slice_u16_test.go
              - src/ami/runtime/host/gpu/metal_slice_u32_test.go
              - src/ami/runtime/host/gpu/metal_slice_u8_test.go
              - src/ami/runtime/host/gpu/metal_slice_f32_test.go
              - src/ami/runtime/host/gpu/blocking_test.go

          - id: E-8-3-4
            statement: |
              As a user, I expect buffer and transfer APIs: `gpu.MetalAlloc(n int) (gpu.Buffer, error)`,
              `gpu.MetalFree(buf gpu.Buffer) error`, `gpu.MetalCopyToDevice(dst gpu.Buffer, src []byte) error`, and
              `gpu.MetalCopyFromDevice(dst []byte, src gpu.Buffer) error`.
            dependencies: [F-11-21]
            status: complete
            tests:
              - src/ami/runtime/host/gpu/metal_release_test.go
              - src/ami/runtime/host/gpu/metal_scalar_u8_test.go
              - src/ami/runtime/host/gpu/metal_slice_f32_test.go

      - id: F-8-4
        name: OpenCL Backend (OpenCL*)
        expectations:
          - id: E-8-4-1
            statement: |
              As a user, I expect OpenCL discovery helpers: `gpu.OpenCLAvailable() bool` and 
              `gpu.OpenCLPlatforms() []gpu.Platform` with device enumeration.
            dependencies: []
            status: ready
            tests:
              - src/ami/runtime/host/gpu/opencl_discovery_test.go
              - src/ami/runtime/host/gpu/opencl_env_test.go
              - src/ami/runtime/host/gpu/opencl_devices_test.go

          - id: E-8-4-2
            statement: |
              As a user, I expect context, buffers, and kernels: `gpu.OpenCLCreateContext(p gpu.Platform) 
              (gpu.Context, error)`, `gpu.OpenCLAlloc(n int) (gpu.Buffer, error)`, `gpu.OpenCLFree(buf gpu.Buffer) 
              error`,`gpu.OpenCLBuildProgram(src string) (gpu.Program, error)`, `gpu.OpenCLGetKernel(prog gpu.Program, 
              name string) (gpu.Kernel, error)`, and `gpu.OpenCLLaunchKernel(ctx gpu.Context, k gpu.Kernel, global, 
              local [3]size_t, args ...any) error`.
            dependencies: [F-11-21]
            status: ready
            tests:
              - src/ami/runtime/host/gpu/opencl_args_test.go
              - src/ami/runtime/host/gpu/opencl_owned_handles_test.go
              - src/ami/runtime/host/gpu/opencl_error_paths_test.go

      - id: F-8-5
        name: Common Opaque Handles and Ownership
        expectations:
          - id: E-8-5-1
            statement: |
              As a user, I expect common opaque types `gpu.Context`, `gpu.Buffer`, `gpu.Module/Library`,
              `gpu.Program`, `gpu.Kernel/Pipeline`, `gpu.Device/Platform` to follow Owned<T> semantics with
              zeroization on release and deterministic erroring on double-free.
            dependencies: [F-11-21]
            status: ready
            tests:
              - src/ami/runtime/host/gpu/gpu_stub_test.go
              - src/ami/runtime/host/gpu/cuda_owned_handles_test.go
              - src/ami/runtime/host/gpu/opencl_owned_handles_test.go

      - id: F-8-6
        name: Determinism, Scheduling, and Diagnostics
        expectations:
          - id: E-8-6-1
            statement: |
              As a user, I expect GPU operations to integrate deterministically with the runtime scheduler and event
              model; backend availability is probed explicitly, and launches produce clear diagnostics on failure.
            dependencies: [F-11-23, F-11-22]
            status: in_progress
            tests:
              - src/ami/runtime/host/gpu/explain_test.go
              - src/ami/runtime/host/gpu/gpu_diag_test.go
