stdlib:
  - id: S-1
    name: io package
    features:
      - id: F-1-1
        name: Stdlib File Input / Output
        expectations:
          - id: E-1-1-1
            statement: |
              As a user, I expect the stdlib to have a built-in `io` package for file input and output.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-2
            statement: |
              As a user, I expect that AMI `io` package will have a file handle object (FHO) representing a file and 
              its underlying file handle.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-3
            statement: |
              As a user, I expect the AMI `io` package to have a function comparable to `os.Open()` in Golang, except
              that this function will return an FHO and error object rather than a file handle pointer.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-4
            statement: |
              As a user, I expect that AMI `io.FHO` type will manage all file I/O for its given file; the io.FHO 
              will have a .Close() method to close the method, after which it should be freed in memory and unusable;
              the io.FHO object should have .Read(), .ReadBytes(), .Write(), .WriteBytes(), .Seek() and other such 
              functions as needed to perform file I/O.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-5
            statement: |
              As a user, I expect that AMI `io.FHO` type will manage all file I/O for its given file; the io.FHO 
              will have a .Close() method to close the method, after which it should be freed in memory and unusable;
              the io.FHO object should have .Read(), .ReadBytes(), .Write(), .WriteBytes(), .Seek() and other such 
              functions as needed to perform file I/O.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-6
            statement: |
              As a user, I expect that AMI `io.FHO` type will have a .Length() method which will return the file size,
              a .Pos() method which returns the current file position for read/write operations, a .Truncate() method
              used to truncate the file.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-7
            statement: |
              As a user, I expect that AMI `io.FHO` type will have a .Flush() method to flush file buffers to disk.
            dependencies: []
            status: ready
            tests: []

      - id: F-1-2
        name: Stdlib Console Input / Output
        expectations:
          - id: E-1-2-1
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO called io.Stdin for reading from stdin;
              and this FHO  will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-2-2
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO called io.Stdout for reading from
              stdout; and this FHO  will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-2-3
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO called io.Stderr for reading from
              stderr; and this FHO  will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: ready
            tests: []

      - id: F-1-3
        name: Stdlib Network Input / Output
        expectations:
          - id: E-1-3-1
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO, representing a network socket
              opened for input/output.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-3-2
            statement: |
              As a user, I expect that the AMI `io` package will have a built-in function for opening a network socket
              as a client to connect to some remote host on a given protocol, address and port
            dependencies: []
            status: ready
            tests: []

          - id: E-1-3-3
            statement: |
              As a user, I expect that the AMI `io` package will have a built-in function for opening a network socket
              as a server to listen for inbound connections on a given protocol, address and port; and that I can 
              register a handler function which will process any incoming network traffic and return the network 
              message and any relevant error message
            dependencies: []
            status: ready
            tests: []

      - id: F-1-4
        name: Stdlib Console Input / Output
        expectations:
          - id: E-1-4-1
            statement: |
              As a user, I expect that the AMI `io` package will enforce all I/O capabilities, as defined for
              the pipeline and the POP paradigm generally; only Ingress or egress nodes can use the io package,
              and only ingress and egress nodes can use the I/O features specifically allowed in their capabilities
              attributes.

  - id: S-1
    name: os package
    features:
      - id: F-1-1
        name: Stdlib Operating System Interfaces
        expectations:
          - id: E-1-1-1
            statement: |
              As a user, I expect the stdlib to have a built-in `os` package for interacting with the operating system.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-2
            statement: |
              As a user, I expect the AMI `os` package will have a function for executing an external program; and the
              function will return a process object for interacting with the process asynchronously as well as any error
              state from the spawning process; the process object will have a PID property to obtain the process id of
              the spawned process; the process object will have methods for sending to stdin or receiving from either
              stdout or stderr; the process object will also have a .Kill() method to immediately terminate the process;
              and the process object will have a .Status() method which returns information about the process state.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-3
            statement: |
              As a user, I expect the AMI `os` package will have a function to kill a specific process by its pid.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-4
            statement: |
              As a user, I expect the AMI `os` package will have a function to list all processes on the system as a
              structured map.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-5
            statement: |
              As a user, I expect the AMI `os` package
            dependencies: []
            status: ready
            tests: []
