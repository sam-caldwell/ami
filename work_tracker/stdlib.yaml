stdlib:
  - id: S-1
    name: io package
    features:
      - id: F-1-1
        name: Stdlib File Input / Output
        expectations:
          - id: E-1-1-1
            statement: |
              As a user, I expect the stdlib to have a built-in `io` package for file input and output.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-2
            statement: |
              As a user, I expect that AMI `io` package will have a file handle object (FHO) representing a file and 
              its underlying file handle.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-3
            statement: |
              As a user, I expect the AMI `io` package to have a function comparable to `os.Open()` in Golang, except
              that this function will return an FHO and error object rather than a file handle pointer.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-4
            statement: |
              As a user, I expect that AMI `io.FHO` type will manage all file I/O for its given file; the io.FHO 
              will have a .Close() method to close the method, after which it should be freed in memory and unusable;
              the io.FHO object should have .Read(), .ReadBytes(), .Write(), .WriteBytes(), .Seek() and other such 
              functions as needed to perform file I/O.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-5
            statement: |
              As a user, I expect that AMI `io.FHO` type will manage all file I/O for its given file; the io.FHO 
              will have a .Close() method to close the method, after which it should be freed in memory and unusable;
              the io.FHO object should have .Read(), .ReadBytes(), .Write(), .WriteBytes(), .Seek() and other such 
              functions as needed to perform file I/O.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-6
            statement: |
              As a user, I expect that AMI `io.FHO` type will have a .Length() method which will return the file size,
              a .Pos() method which returns the current file position for read/write operations, a .Truncate() method
              used to truncate the file.
            dependencies: []
            status: ready
            tests: []
          - id: E-1-1-7
            statement: |
              As a user, I expect that AMI `io.FHO` type will have a .Flush() method to flush file buffers to disk.
            dependencies: []
            status: ready
            tests: []

      - id: F-1-2
        name: Stdlib Console Input / Output
        expectations:
          - id: E-1-2-1
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO called io.Stdin for reading from stdin;
              and this FHO  will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-2-2
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO called io.Stdout for reading from
              stdout; and this FHO  will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-2-3
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO called io.Stderr for reading from
              stderr; and this FHO  will behave like any other FHO with all the same methods and properties.
            dependencies: []
            status: ready
            tests: []

      - id: F-1-3
        name: Stdlib Network Input / Output
        expectations:
          - id: E-1-3-1
            statement: |
              As a user, I expect that AMI `io` package will have a special FHO, representing a network socket
              opened for input/output with methods and properties like a file FHO object.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-3-2
            statement: |
              As a user, I expect that AMI `io` package will have an .Open() function which will allow me to open
              a network socket (FHO) to send traffic over a given protocol (e.g., ICMP, UDP, TCP) to a given host IP and 
              port.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-3-3
            statement: |
              As a user, I expect that AMI `io.FHO` object type will have a .Close() method to close the socket; a 
              .Write() method so I can write messages to the socket buffer; a .Send() method to send the contents of
              the FHO buffer; and a .Listen() method which I can use to register a handler function which will be
              invoked to process any incoming network traffic.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-3-4
            statement: |
              As a user, I expect that AMI `io` package will have an `io.Hostname()` method which will return the 
              current hostname of the underlying system.
            dependencies: []
            status: ready
            tests: []

          - id: E-1-3-4
            statement: |
              As a user, I expect that AMI `io` package will have an `io.Interfaces()` method which will list all
              network interfaces.
            dependencies: []
            status: ready
            tests: []

      - id: F-1-4
        name: I/O POP Capability Enforcement
        expectations:
          - id: E-1-4-1
            statement: |
              As a user, I expect that the AMI `io` package will enforce all I/O capabilities, as defined for
              the pipeline and the POP paradigm generally; only Ingress or egress nodes can use the io package,
              and only ingress and egress nodes can use the I/O features specifically allowed in their capabilities
              attributes.

  - id: S-2
    name: os package exec()
    features:
      - id: F-2-1
        name: Stdlib Operating System Interface (Process Runner)
        expectations:
          - id: E-2-1-1
            statement: |
              As a user, I expect the stdlib to have a built-in `os` package for interacting with the operating system.
            dependencies: []
            status: ready
            tests: []
          - id: E-2-1-2
            statement: |
              As a user, I expect the AMI `os` package will have a `Process` object type used to represent a process
              spawned by the program; the os.Process type will be used to manage the process lifecycle.
            dependencies: []
            status: ready
            tests: []
          - id: E-2-1-3
            statement: |
              As a user, I expect the AMI `os` package will have an `Exec()` which will initialize a given external 
              program and return a os.Process object and error object; the os.Process object will be used to manage
              the process lifecycle; and the Exec() function will initialize but NOT start the new process.
            dependencies: []
            status: ready
            tests: []
          - id: E-2-1-4
            statement: |
              As a user, I expect the AMI `os.Process` object type will have a .Kill() method to immediately terminate
              the process, a .Status() method to return process state information (as a struct), a .Stdin() method for
              interacting over stdin, a .Stdout() and .Stderr() method for obtaining process outputs on stdout and
              stderr, a .Pid() method for obtaining the process id, and a .Start() method to launch the process.
            dependencies: []
            status: ready
            tests: []
          - id: E-2-1-5
            statement: |
              As a user, I expect the AMI `os.Process` .Start() method will accept an optional boolean value to indicate
              whether it blocks or runs the executed process asynchronously.
            dependencies: []
            status: ready
            tests: []

  - id: S-3
    name: os package
    features:
      - id: F-2-1
        name:
        expectations:
          - id: E-2-1-1
            statement: |
              As a user, I expect
            dependencies: []
            status: ready
            tests: []
